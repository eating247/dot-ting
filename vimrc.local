colorscheme one
set mouse=a
syntax on
set background=light
set cursorline
set cursorcolumn
set clipboard=unnamed
set foldmethod=expr
set nofoldenable " Leave open all folds"
set foldexpr=getline(v:lnum)=~'^\\s*$'&&getline(v:lnum+1)=~'\\S'?'<1':1

" get out
inoremap jk <esc>

" nav between tabs
nnoremap J gT
nnoremap K gt

" smoother nav between lines
nnoremap j gj
nnoremap k gk

nnoremap <Leader>notes :Sexplore! ~/dotfiles-local/cheat/

" autocomplete parentheses/brackets
inoremap ( ()<Esc>i
inoremap [ []<Esc>i
inoremap { {}<Esc>i
" inoremap ' ''<Esc>i
inoremap " ""<Esc>i

" fuzzyfinder
nnoremap <C-P> :FZF<CR>

" easier nav for terminal mode in nvim
augroup neoterm
  au BufEnter * if &buftype == 'terminal' | :startinsert | endif
augroup END
tnoremap <C-h> <C-\><C-n><C-w>h
tnoremap <C-j> <C-\><C-n><C-w>j
tnoremap <C-k> <C-\><C-n><C-w>k
tnoremap <C-l> <C-\><C-n><C-w>l
tnoremap kj <C-\><C-n>
tnoremap <C-d> <C-\><C-n>:bd!<CR>

set wildignore+=tmp/** " Ignore stuff that can't be opened
set wildmenu " Enables a menu at the bottom of the vim window.
set wildmode=list:longest,list:full

" line numbers
set number relativenumber
set numberwidth=5

" html autocomplete plugin
let g:closetag_filenames = '*.html, *.erb, *.jsx, *.js'
let g:jsx_ext_required = 0 " Allow JSX in normal JS files

" ale
let g:ale_linters = {
      \ 'javascript': ['prettier-standard', 'standard'],
      \ 'css': ['stylelint'],
      \ 'scss': ['stylelint'],
      \ 'ruby': ['rubocop', 'reek']
      \ }

let g:ale_fixers = {
      \ 'javascript': ['prettier']
      \ }

let g:ale_set_quickfix = 0
let g:ale_statusline_format = ['✕ %d', '△ %d', '=_=']
let g:ale_sign_warning = '△'
let g:ale_sign_error = '✕'
let g:ale_echo_msg_error_str = 'Error'
let g:ale_echo_msg_warning_str = 'Warning'
let g:ale_echo_msg_format = '[%linter%] %s'
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0

" shortcuts
map <C-n> :nohl<cr>
map <C-t> <esc>:tabe<CR>
map <C-c> <esc>:tabc<CR>
nnoremap <Leader>h :History<CR>
nnoremap <Leader>b :wa<CR>:Buffers<CR>

" Source vimrc
command! ReloadVimrc source $MYVIMRC

" update jest snapshots
let g:test#runner_commands = ['Jest']
nnoremap <Leader>u :Jest <C-r>=escape(expand("%"), ' ') . ' ' . '--updateSnapshot'<CR><CR>
